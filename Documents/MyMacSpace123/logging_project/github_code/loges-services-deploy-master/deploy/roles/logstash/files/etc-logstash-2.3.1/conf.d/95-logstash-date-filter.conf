filter {
  ruby {
     code => "event['lag_seconds'] = (Time.now.to_f - event['@timestamp'].to_f)"
  }

  # 14 represents the number of days. If the message is older than 14 days, cancel it
  # 60*60*24*14 = 1209600
  # TODO: The last number will be different depending on the environment, needs some ansible automation in place
  # updating filter to only hold data for 2 days (48 hours) 60*60*24*2 = 172800
  if [lag_seconds] > 172800 {
    alter { add_tag => [ "too_old" ] }
    metrics {
      meter => "too_old"
      add_tag => "alchemy-logstash-internal-metering"
    }
    # change the timestamp to the current time
    # ruby { code => "event['new_timestamp'] = Time.now.iso8601 ; event['original_timestamp'] = event['@timestamp']" }
    # date { match => [ "new_timestamp", "ISO8601" ] }
    # mutate { remove_field => ["new_timestamp"] }

    # We've decided we're going to drop older logs instead of re-dating them
    drop {} 
  }

  # Remove the added field since we don't want this exposed to users
  mutate { remove_field => ["lag_seconds"] }

}
