filter {

    if "bluemix_" in [bluemix_env]
    {
        mutate { add_field => { "_filePath" => "%{file}" } }
        mutate { remove_field => "file" }
        if "router_access" in [type]
        {
            grok {
                patterns_dir => "/etc/logstash/conf.d/20-bluemix/patterns"
                match => { "message" => "%{ROUTERACCESSLOG}" }
            }
            date {
                match => [ "startTime" , "dd/MM/yyyy:HH:mm:ss Z", "dd/MM/yyyy:HH:mm:ss.SSS Z"]
            }
            mutate { remove_field => "startTime" }
        }
        else if "nginx_cc_access_" in [type]
        {
            grok {
                patterns_dir => "/etc/logstash/conf.d/20-bluemix/patterns"
                match => { "message" => "%{NGINXACCESSLOG}" }
            }
        }
        else if "monit" in [type]
        {
            grok {
                patterns_dir => "/etc/logstash/conf.d/20-bluemix/patterns"
                match => { "message" => "\[%{DATA:startTime}\] %{WORD:loglevel} : " }
            }
        }
        else if ( "dea_next_json_log" in [type]) or
                ( "warden_json_log" in [type] )            or
                ( "gorouter_json_log" in [type] )            or
                ( "cloud_controller_ng_json_log" in [type] )

        {
             if  [kafka][msg_size] < 10000
             {
                  json { source => "message" }

                  # This json_encode will stop us from having the mapping
                  # growing in ES caused by the GUIDs being keys in the parsed
                  # JSON - the data fields will be converted to a string and
                  # will still be in the log record
                  json_encode { source => "[data]" }

                  if [log_level] =~ /.+/ {
                      mutate { add_field => { "loglevel" => "%{log_level}" } }
                      mutate { remove_field => "log_level" }
                  }
             }
        }
    }
}
