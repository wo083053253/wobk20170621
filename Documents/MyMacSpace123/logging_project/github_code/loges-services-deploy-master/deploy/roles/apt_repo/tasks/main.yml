---
- name: set default UPDATE_ENABLED value
  set_fact:
    UPDATE_ENABLED: 0
  when: UPDATE_ENABLED is not defined

- name: this command prints FAILED when it fails
  stat: path=/etc/apt/sources.list.d/logging.list
  register: p

- fail:
    msg: "The logging repository source file is not exit"
  when: p.stat.exists == False

- name: print apt_repo file name
  debug:
    msg: "logging apt repo file name: {{ p.stat.path }}"
  when: p.stat.exists == False

- name: transfer scripts to tmp path of the server
  sudo_user: root
  sudo: yes
  template:
    src: "{{ item.src}}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 0755
  with_items:
    - { src: "get_apt_repo_name.sh", dest: "/tmp/get_apt_repo_name.sh" }

- name: get snapshot name
  sudo_user: root
  sudo: yes
  script: /bin/bash  /tmp/get_apt_repo_name.sh {{ p.stat.path }}
  register: repo_result
  when: p.stat.exists is defined or p.stat.exists == True

# - name: print snapshot
#   debug: 
#     msg: "logging_snapshot_name: {{ repo_result.stdout }}"
# - name: print snapshot
#   debug: 
#     msg: "logging_snapshot_name: {{ repo_result.stdout | replace('\r', '')| replace('\n', '')}}" 

- name: print snapshot
  debug: 
    msg: "logging_snapshot_name:{{ repo_result.stdout_lines| list | join('') }}"

- name: original logging snapshot name
  set_fact:
    original_snapshot_name: "{{ repo_result.stdout_lines| list | join('') }}"

- name: update apt_repo source list file
  sudo_user: root
  sudo: yes
  shell: sed -i -r "s/{{ original_snapshot_name }}/{{ apt_repo }}/" {{ p.stat.path }}
  when: UPDATE_ENABLED is defined and UPDATE_ENABLED == "1"

