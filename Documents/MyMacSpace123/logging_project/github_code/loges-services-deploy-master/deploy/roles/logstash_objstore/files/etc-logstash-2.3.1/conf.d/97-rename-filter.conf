filter {
  # The skip_rename_filter is an event property some of our trusted & conforming custom-filters can set for performance
  if "RENAME_FILTER_ENABLE" == "true" {
    if [skip_rename_filter] != "true" {
      # Fix field names to comply with ES rules:
      # 1.  rename fields to substitute '_' for '.'
      # 2.  add _<type> to numeric, boolean, and array fields in order to avoid conflicting types for fields with the same name
      ruby {
        code => "
            $fixed_strings = [ 'message', '@timestamp', 'logmet_cluster', '_id', '@version', 'file', 'type', 'skip_rename_filter',
                               'host', 'ALCH_TENANT_ID', 'ALCH_TENANT_ORG_ID', 'bluemix_env', '_filePath', 'message_raw' ]
            def fixup_names( hash_layer )
                hash_layer.keys.each { |k|
                    hash_layer[ k ] = fixup_names(hash_layer[k]) if hash_layer[k].is_a?(Hash)

                    # These checks make sure nobody is naming variables with a suffix that doesn't match the type
                    if k.end_with?('_int')
                        if hash_layer[k].is_a?(Fixnum)
                            hash_layer[ k.gsub('.','_') ] = hash_layer.delete(k) if k.include?('.')
                        else
                            hash_layer.delete(k)  # badly named var, delete it
                        end
                        next
                    end
                    if k.end_with?('_date') or k == 'timestamp'
                        if hash_layer[k].is_a?(String)
                            begin
                                test = LogStash::Timestamp.parse_iso8601(hash_layer[k])
                                hash_layer[ k.gsub('.','_') ] = hash_layer.delete(k) if k.include?('.')
                            rescue LogStash::TimestampParserError => e
                                hash_layer[ k.gsub('.','_').gsub('_date','')+'_str' ] = hash_layer.delete(k)
                            end
                        else
                            hash_layer.delete(k)  # badly named var, delete it
                        end
                        next
                    end
                    if k.end_with?('_str')
                        if hash_layer[k].is_a?(String)
                            hash_layer[ k.gsub('.','_') ] = hash_layer.delete(k) if k.include?('.')
                        else
                            hash_layer.delete(k)  # badly named var, delete it
                        end
                        next
                    end
                    if k.end_with?('_float')
                        if hash_layer[k].is_a?(Float)
                            hash_layer[ k.gsub('.','_') ] = hash_layer.delete(k) if k.include?('.')
                        else
                            hash_layer.delete(k)  # badly named var, delete it
                        end
                        next
                    end
                    if k.end_with?('_bool')
                        if hash_layer[k].is_a?(TrueClass) || hash_layer[k].is_a?(FalseClass)
                            hash_layer[ k.gsub('.','_') ] = hash_layer.delete(k) if k.include?('.')
                        else
                            hash_layer.delete(k)  # badly named var, delete it
                        end
                        next
                    end
                    if k.end_with?('_array')
                        if hash_layer[k].is_a?(Array)
                            hash_layer[ k.gsub('.','_') ] = hash_layer.delete(k) if k.include?('.')
                        else
                            hash_layer.delete(k)  # badly named var, delete it
                        end
                        next
                    end

                    # Uncomment this to determine type of a given field
                    # hash_layer[ k.gsub('.','_')+'_type' ] = hash_layer[k].class.name

                    # Here we add the type suffix if not type string
                    if (hash_layer[k].is_a?(String) and not $fixed_strings.include?(k))
                        hash_layer[ k.gsub('.','_')+'_str' ] = hash_layer.delete(k)
                    elsif hash_layer[k].is_a?(Fixnum)
                        hash_layer[ k.gsub('.','_')+'_int' ] = hash_layer.delete(k)
                    elsif hash_layer[k].is_a?(Float)
                        hash_layer[ k.gsub('.','_')+'_float' ] = hash_layer.delete(k)
                    elsif hash_layer[k].is_a?(TrueClass) || hash_layer[k].is_a?(FalseClass)
                        hash_layer[ k.gsub('.','_')+'_bool' ] = hash_layer.delete(k)
                    elsif hash_layer[k].is_a?(Array)
                        hash_layer[ k.gsub('.','_')+'_array' ] = hash_layer.delete(k)
                    elsif k.include?'.'
                        hash_layer[ k.gsub('.','_') ] = hash_layer.delete(k)
                    end
                }
                return hash_layer
            end

            # fix up the fields in the event
            fixup_names(event.to_hash)
        "
      }
    }
  mutate { remove_field => [ "skip_rename_filter" ] }
  }
}
